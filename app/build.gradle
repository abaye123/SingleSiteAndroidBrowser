plugins {
    id 'com.android.application'
}

def loadEnvProps() {
    def envFile = new File("${project.projectDir}/.env")
    def props = new Properties()
    if (envFile.exists()) {
        envFile.withInputStream { stream ->
            props.load(new InputStreamReader(stream, "UTF-8"))
        }
    }
    return props
}

def getEnvValue(key, defaultValue = '') {
    def props = loadEnvProps()
    return props.getProperty(key, System.getenv(key) ?: defaultValue)
}

android {
    signingConfigs {
        release {
            storeFile = file("keystore/android_keystore.jks")
            storePassword getEnvValue('SIGNING_STORE_PASSWORD')
            keyAlias getEnvValue('SIGNING_KEY_ALIAS')
            keyPassword getEnvValue('SIGNING_KEY_PASSWORD')
        }
    }

    compileSdkVersion 34
    defaultConfig {
        buildConfigField "String", "ALLOWED_DOMAINS", "\"${getEnvValue('ALLOWED_DOMAINS', 'example.com')}\""
        buildConfigField "String", "STARTUP_URL", "\"${getEnvValue('STARTUP_URL', 'example.com')}\""
        buildConfigField "String", "VIEW_MODE", "\"${getEnvValue('VIEW_MODE', 'AUTO')}\""
        buildConfigField "boolean", "BLOCK_MEDIA", "${getEnvValue('BLOCK_MEDIA', 'false')}"
        buildConfigField "boolean", "BLOCK_ADS", "${getEnvValue('BLOCK_ADS', 'true')}"
        buildConfigField "boolean", "NO_SSL", "${getEnvValue('NO_SSL', 'false')}"
        buildConfigField "boolean", "HIDE_NETFREE", "${getEnvValue('HIDE_NETFREE', 'true')}"
        resValue "string", "app_name", getEnvValue('APP_NAME', 'my app')
        applicationId getEnvValue('APPLICATION_ID', 'com.shchiche.webapp')

        minSdkVersion 16
        targetSdkVersion 34
        versionCode 1
        versionName getEnvValue('VERSION', '1.0.0')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.webview.myapplication'
}



def appIconPath = getEnvValue('APP_ICON_PATH')
def appRoundIconPath = getEnvValue('APP_ROUND_ICON_PATH')

// המשימה תעתיק את האייקון המותאם אישית לנתיב הנכון
task replaceAppIcons(type: Copy) {
    doFirst {
        if (appIconPath) {
            copy {
                from appIconPath
                into "$projectDir/src/main/res/mipmap-anydpi-v26/"
                rename { "ic_launcher.png" }
            }
            println "Custom icon replaced: ic_launcher.png"
        }
        if (appRoundIconPath) {
            copy {
                from appRoundIconPath
                into "$projectDir/src/main/res/mipmap-anydpi-v26/"
                rename { "ic_launcher_round.png" }
            }
            println "Custom round icon replaced: ic_launcher_round.png"
        }
    }
}

preBuild.dependsOn replaceAppIcons


dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
}